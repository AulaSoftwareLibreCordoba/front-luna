---
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import type { iconPaths } from "../lib/IconPaths";

const textLinks: { label: string; href: string }[] = [
  { label: "PIZARRA", href: "/" },
  { label: "MI REFUGIO", href: "/refugio/" },
  { label: "INFORMACIÃ“N", href: "/informacion/" },
];

const iconLinks: {
  label: string;
  href: string;
  icon: keyof typeof iconPaths;
}[] = [];
---

<nav>
  <div class="menu-header">
    <a href="/" class="site-title">
      <Icon
        icon="moon-stars"
        color="var(--accent-regular)"
        size="1.6em"
        gradient
      />
    </a>
    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <noscript>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>
  <noscript>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
    </div>
  </noscript>
  <div id="menu-content" hidden>
    <ul
      class="grid place-content-center pt-10 md:pt-0 text-center bg-transparent md:flex gap-10 backg"
    >
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              class="navbar__link relative cursor-pointer font-bold"
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
      <div class="flex items-center gap-20">
        <div class="theme-toggle">
          <ThemeToggle />
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

			this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;
      menu.classList.add("menu-content");

      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
      };

      btn.addEventListener("click", () => setExpanded(menu.hidden));

      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style>
  nav {
    z-index: 9999;
    position: relative;
    font-family: var(--font-brand);
    font-weight: 500;
    margin-bottom: 1rem;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1.5rem;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    /* color: var(--gray-0); */
    text-decoration: none;
  }

  .menu-button {
    position: relative;
    display: flex;
    border-radius: 999rem;
    padding: 0.5rem;
    font-size: 1.5rem;
    color: #c547ff;
  }

  .menu-button[aria-expanded="true"] {
    color: #62038f;
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: "";

    border-radius: 999rem;
    z-index: -1;
  }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    line-height: 1.2;
    list-style: none;
    padding: 2rem;
  }

  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }

  .link.active {
    color: var(--gray-0);
  }

  .menu-footer {
    --icon-size: var(--text-xl);
    --icon-padding: 0.5rem;

    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    border-radius: 0 0 0.75rem 0.75rem;
  }

  .socials {
    display: flex;
    flex-wrap: wrap;
    gap: 0.625rem;
    font-size: var(--icon-size);
  }

  .social {
    display: flex;
    padding: var(--icon-padding);
    text-decoration: none;
    color: var(--accent-dark);
    transition: color var(--theme-transition);
  }

  .social:hover,
  .social:focus {
    color: var(--accent-text-over);
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
  }

  @media (min-width: 50em) {
    nav {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      padding: 2.5rem 5rem;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .site-title {
      font-size: var(--text-lg);
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--text-sm);
      border-radius: 999rem;
      padding: 0.5rem 0.5625rem;
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      transition:
        color var(--theme-transition),
        background-color var(--theme-transition);
    }

    .link:hover,
    .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link.active {
      color: var(--accent-text-over);
      background-color: var(--accent-subtle-overlay);
      border-bottom: 6px solid #b122f3;
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      box-shadow: none;
    }

    .socials {
      display: none;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: flex;
      justify-content: flex-end;
      gap: 0;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }

  .navbar__link:hover {
    color: #515151;
    transition: all 0.4s;
    -webkit-transition: all 0.4s;
    -moz-transition: all 0.4s;
    -ms-transition: all 0.4s;
    -o-transition: all 0.4s;
  }

  .navbar__link:after {
    position: absolute;
    content: "";
    background-color: #b122f3;
    height: 3px;
    width: 100%;
    bottom: -5px;
    left: 0;
    scale: 0;
    transform-origin: left;
    transition: all 0.4s;
    -webkit-transition: all 0.4s;
    -moz-transition: all 0.4s;
    -ms-transition: all 0.4s;
    -o-transition: all 0.4s;
  }

  .navbar__link:hover::after {
    scale: 1;
  }
</style>
