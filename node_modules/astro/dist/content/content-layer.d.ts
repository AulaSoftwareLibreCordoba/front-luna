import type { FSWatcher } from 'vite';
import type { AstroSettings } from '../@types/astro.js';
import type { Logger } from '../core/logger/core.js';
import type { LoaderContext } from './loaders/types.js';
import type { MutableDataStore } from './mutable-data-store.js';
export interface ContentLayerOptions {
    store: MutableDataStore;
    settings: AstroSettings;
    logger: Logger;
    watcher?: FSWatcher;
}
export declare class ContentLayer {
    #private;
    constructor({ settings, logger, store, watcher }: ContentLayerOptions);
    /**
     * Whether the content layer is currently loading content
     */
    get loading(): boolean;
    /**
     * Watch for changes to the content config and trigger a sync when it changes.
     */
    watchContentConfig(): void;
    unwatchContentConfig(): void;
    /**
     * Run the `load()` method of each collection's loader, which will load the data and save it in the data store.
     * The loader itself is responsible for deciding whether this will clear and reload the full collection, or
     * perform an incremental update. After the data is loaded, the data store is written to disk.
     */
    sync(): Promise<void>;
    regenerateCollectionFileManifest(): Promise<void>;
}
export declare function simpleLoader<TData extends {
    id: string;
}>(handler: () => Array<TData> | Promise<Array<TData>>, context: LoaderContext): Promise<void>;
export declare const globalContentLayer: {
    initialized: () => boolean;
    init: (options: ContentLayerOptions) => ContentLayer;
    get: () => ContentLayer;
    dispose: () => void;
};
