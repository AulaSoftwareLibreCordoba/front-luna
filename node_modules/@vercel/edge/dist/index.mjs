"use strict";

// src/middleware-helpers.ts
function handleMiddlewareField(init, headers) {
  var _a;
  if ((_a = init == null ? void 0 : init.request) == null ? void 0 : _a.headers) {
    if (!(init.request.headers instanceof Headers)) {
      throw new Error("request.headers must be an instance of Headers");
    }
    const keys = [];
    for (const [key, value] of init.request.headers) {
      headers.set("x-middleware-request-" + key, value);
      keys.push(key);
    }
    headers.set("x-middleware-override-headers", keys.join(","));
  }
}
function rewrite(destination, init) {
  const headers = new Headers((init == null ? void 0 : init.headers) ?? {});
  headers.set("x-middleware-rewrite", String(destination));
  handleMiddlewareField(init, headers);
  return new Response(null, {
    ...init,
    headers
  });
}
function next(init) {
  const headers = new Headers((init == null ? void 0 : init.headers) ?? {});
  headers.set("x-middleware-next", "1");
  handleMiddlewareField(init, headers);
  return new Response(null, {
    ...init,
    headers
  });
}

// src/edge-headers.ts
var CITY_HEADER_NAME = "x-vercel-ip-city";
var COUNTRY_HEADER_NAME = "x-vercel-ip-country";
var IP_HEADER_NAME = "x-real-ip";
var LATITUDE_HEADER_NAME = "x-vercel-ip-latitude";
var LONGITUDE_HEADER_NAME = "x-vercel-ip-longitude";
var REGION_HEADER_NAME = "x-vercel-ip-country-region";
var REQUEST_ID_HEADER_NAME = "x-vercel-id";
var EMOJI_FLAG_UNICODE_STARTING_POSITION = 127397;
function getHeader(request, key) {
  return request.headers.get(key) ?? void 0;
}
function getFlag(countryCode) {
  const regex = new RegExp("^[A-Z]{2}$").test(countryCode);
  if (!countryCode || !regex)
    return void 0;
  return String.fromCodePoint(...countryCode.split("").map((char) => EMOJI_FLAG_UNICODE_STARTING_POSITION + char.charCodeAt(0)));
}
function ipAddress(request) {
  console.warn("This method will be removed in the next major version. Use `import { ipAddress } from @vercel/functions` instead.");
  return getHeader(request, IP_HEADER_NAME);
}
function getRegionFromRequestId(requestId) {
  if (!requestId) {
    return "dev1";
  }
  return requestId.split(":")[0];
}
function geolocation(request) {
  console.warn("This method will be removed in the next major version. Use `import { geolocation } from @vercel/functions` instead.");
  return {
    city: getHeader(request, CITY_HEADER_NAME),
    country: getHeader(request, COUNTRY_HEADER_NAME),
    flag: getFlag(getHeader(request, COUNTRY_HEADER_NAME)),
    countryRegion: getHeader(request, REGION_HEADER_NAME),
    region: getRegionFromRequestId(getHeader(request, REQUEST_ID_HEADER_NAME)),
    latitude: getHeader(request, LATITUDE_HEADER_NAME),
    longitude: getHeader(request, LONGITUDE_HEADER_NAME)
  };
}

// src/response.ts
function json(data, init) {
  return Response.json(data, init);
}
export {
  CITY_HEADER_NAME,
  COUNTRY_HEADER_NAME,
  EMOJI_FLAG_UNICODE_STARTING_POSITION,
  IP_HEADER_NAME,
  LATITUDE_HEADER_NAME,
  LONGITUDE_HEADER_NAME,
  REGION_HEADER_NAME,
  REQUEST_ID_HEADER_NAME,
  geolocation,
  ipAddress,
  json,
  next,
  rewrite
};
